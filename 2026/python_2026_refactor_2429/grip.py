import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        CJH made a lot of changes in order for this to be visible to child
        """
        self.color = None  # add in the option of having a color here, it helps with filter selection)

        # had to un-namemangle these for simplicity of letting child change them
        self._hsv_threshold_hue = [11.3, 32.5]
        self._hsv_threshold_saturation = [128.4, 255.0]
        self._hsv_threshold_value = [100.8, 255.0]

        self._blur_type = BlurType.Gaussian_Blur
        # Bilateral_Filter (and MedianFilter, about half as much but still a pig) Blur is VERY expensive  - more than drawing and computing HSVs.
        # Box and Gaussian is way faster.  Plus compression kinda does this for you anyway, so leave at 0 unless testing stuff
        self._blur_radius = 3
        self.blur_output = None

        self._hsv_threshold_input = self.blur_output

        self.hsv_threshold_output = None

        self._find_contours_input = self.hsv_threshold_output
        self._find_contours_external_only = True

        self.find_contours_output = None

        self._filter_contours_contours = self.find_contours_output
        self._filter_contours_min_area = 100
        self._filter_contours_min_perimeter = 0.0
        self._filter_contours_min_width = 8
        self._filter_contours_max_width = 1000.0
        self._filter_contours_min_height = 8
        self._filter_contours_max_height = 1000
        self._filter_contours_solidity = [24.3, 100.0]
        self._filter_contours_box_fill = [1.0, 100.0]
        self._filter_contours_max_vertices = 1000000
        self._filter_contours_min_vertices = 0
        self._filter_contours_min_ratio = 0.25
        self._filter_contours_max_ratio = 2.5
        self.ignore_y = [0, 2000]  # all y is ok

        self.filter_contours_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Blur0:
        self.__blur_input = source0
        (self.blur_output) = self.__blur(self.__blur_input, self._blur_type, self._blur_radius)

        # Step HSV_Threshold0:
        self._hsv_threshold_input = self.blur_output
        (self.hsv_threshold_output) = self.__hsv_threshold(self._hsv_threshold_input, self._hsv_threshold_hue, self._hsv_threshold_saturation, self._hsv_threshold_value)

        if self.color == 'green':
            self.hsv_threshold_output = cv2.dilate(self.hsv_threshold_output, cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3)), iterations=1)

        # Step Find_Contours0:
        self._find_contours_input = self.hsv_threshold_output
        (self.find_contours_output) = self.__find_contours(self._find_contours_input, self._find_contours_external_only)

        # Step Filter_Contours0:
        self._filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self._filter_contours_contours, self._filter_contours_min_area, self._filter_contours_min_perimeter,
                                                               self._filter_contours_min_width, self._filter_contours_max_width, self._filter_contours_min_height,
                                                               self._filter_contours_max_height, self._filter_contours_solidity, self._filter_contours_max_vertices,
                                                               self._filter_contours_min_vertices, self._filter_contours_min_ratio, self._filter_contours_max_ratio,
                                                               self._filter_contours_box_fill, self.ignore_y)


    # @staticmethod
    def __blur(self, src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    # @staticmethod
    def __hsv_threshold(self, input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        if hue[0] < 10:  # reflect red
            mask_1 = cv2.inRange(out, (hue[0], sat[0], val[0]), (hue[1], sat[1], val[1]))
            mask_2 = cv2.inRange(out, (180-hue[1], sat[0], val[0]), (180, sat[1], val[1]))
            return mask_1 | mask_2
        else:
            return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    # @staticmethod
    def __find_contours(self, input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        # older cv2 returns contours, hierarchy, newer one returns img, contours, hierarchy
        # img, contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        # return contours
        contour_output = cv2.findContours(input, mode=mode, method=method)
        contours = contour_output[-2]  # should work with multiple versions of cv2 - contours is 2nd to last either way
        return contours

    # @staticmethod
    def __filter_contours(self, input_contours, min_area, min_perimeter, min_width, max_width,
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio, box_fill, ignore_y):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:   # remember, continue means skip
            x,y,w,h = cv2.boundingRect(contour)
            if y < ignore_y[0] or y > ignore_y[1]:
                continue
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            box_area = w * h
            box_fill_ratio = 100 * area / box_area
            if (box_fill_ratio < box_fill[0] or box_fill_ratio > box_fill[1]):
                continue
            output.append(contour)
        return output


BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')

